---
import Header from '../components/Header.astro';
import '@fontsource-variable/source-code-pro';

interface Props {
    title: string;
    description: string;
}

const { description, title } = Astro.props;

// Language Data
const translations = {
    es: {
        'inicio': 'Inicio',
        'tecnologias': 'Tecnologías',
        'proyectos': 'Proyectos',
        'sobremi': 'Sobre mí',
        'holaSoy': 'Hola, Soy Rodrigo',
        'openToWork': 'Open To Work',
        'programadorFullStack': 'Programador Full-Stack.',
         'descripcionPersonal': 'Tengo 23 años, soy de Tucumán, Argentina. Me especializo en desarrollo de software y soluciones tecnologicas, siempre buscando mejorar. Mi objetivo es aportar soluciones creativas y efectivas.',
         'linkedin': 'LinkedIn',
         'github': 'GitHub',
         'email': 'rodrieldkii@gmail.com',
         'tecnologiasTitulo': 'Tecnologías',
         'lenguajes': 'Lenguajes',
         'frameworksLibrerias': 'Frameworks y Librerías',
         'basesDatos': 'Bases de Datos',
         'herramientasAdicionales': 'Herramientas Adicionales',
         'proyectosTitulo': 'Proyectos',
         'sobremiTitulo': 'Sobre mí',
         'desarrolladorTecnico': 'Soy <strong>Programador tecnico con formación universitaria</strong> en la UTN FRT  (Universidad Tecnológica Nacional, Facultad Regional Tucumán).',
         'crecerProfesionalmente': 'Estoy buscando oportunidades para <strong>crecer como profesional</strong> y prepararme para el mundo laboral.',
         'habilidadesDev': 'Todos los días continúo desarrollando mis habilidades como dev <strong>Full-Stack</strong>, participando en proyectos y haciendo cursos que me permitan <strong>aprender y crecer</strong> como programador.',
         'verCertificado': 'Ver Certificado',
         'contacto': 'Contacto',
         'code':'Code',
         'preview':'Preview'

    },
    en: {
      'inicio': 'Home',
        'tecnologias': 'Technologies',
        'proyectos': 'Projects',
        'sobremi': 'About me',
        'holaSoy': 'Hello, I\'m Rodrigo',
        'openToWork': 'Open To Work',
        'programadorFullStack': 'Full-Stack Developer.',
        'descripcionPersonal': 'I am 23 years old, from Tucumán, Argentina. I specialize in software development and technological solutions, always looking to improve. My goal is to provide creative and effective solutions.',
        'linkedin': 'LinkedIn',
         'github': 'GitHub',
         'email': 'rodrieldkii@gmail.com',
         'tecnologiasTitulo': 'Technologies',
         'lenguajes': 'Languages',
         'frameworksLibrerias': 'Frameworks and Libraries',
         'basesDatos': 'Databases',
          'herramientasAdicionales': 'Additional Tools',
         'proyectosTitulo': 'Projects',
         'sobremiTitulo': 'About me',
          'desarrolladorTecnico': 'I am a <strong>Technical Programmer with university education</strong> at UTN FRT (National Technological University, Tucumán Regional Faculty).',
          'crecerProfesionalmente': 'I am looking for opportunities to <strong>grow professionally</strong> and prepare for the working world.',
          'habilidadesDev': 'Every day I continue developing my skills as a <strong>Full-Stack</strong> dev, participating in projects and taking courses that allow me to <strong>learn and grow</strong> as a programmer.',
           'verCertificado': 'See Certificate',
           'contacto': 'Contact',
           'code':'Code',
           'preview':'Preview'
    },
};

// Get language from local storage or default to 'es'
let currentLanguage = 'es';
if(typeof localStorage !== 'undefined') {
    currentLanguage = localStorage.getItem('language') || 'es';
}

// Translation Function
function t(key) {
    return translations[currentLanguage][key] || key;
}
---

<!doctype html>
<html lang={currentLanguage}>
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content={description} />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
        <style>
            :root {
                color-scheme: dark;
            }

            html {
                scroll-behavior: smooth;
            }

            body {
                margin: 0;
                padding: 0;
                color: #fff;
                font-family: 'Source Code Pro', monospace;
                min-height: 100vh;
                display: flex;
                flex-direction: column;
                background-color: black;
            }

            .background-canvas {
                background: rgb(2,0,36);
background: linear-gradient(1deg, rgba(2,0,36,1) 0%, rgba(0,0,54,1) 56%, rgba(0,24,69,1) 100%);
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                z-index: -1;
            }

            #pong-game {
                position: fixed;
                bottom: 20px;
                left: 50%;
                transform: translateX(-50%);
                display: none;
                pointer-events: none;
                opacity: 0.7;
                transition: display 0.3s ease, opacity 0.3s ease;
                border: 2px solid rgba(255,255,255,0.5);
            }

            #pong-game.active {
                display: block;
                pointer-events: auto;
                opacity: 1;
            }

            #pong-score {
                position: fixed;
                bottom: 230px;
                left: 50%;
                transform: translateX(-50%);
                color: white;
                font-size: 20px;
                display: none;
                opacity: 0.7;
            }

            #pong-game.active + #pong-score {
                display: block;
            }

            #game-result {
                position: fixed;
                bottom: 260px;
                left: 50%;
                transform: translateX(-50%);
                color: white;
                font-size: 24px;
                display: none;
                text-align: center;
            }

            main {
                flex: 1;
                padding: 1rem;
            }

            @media (prefers-reduced-motion: reduce) {
                html {
                    scroll-behavior: auto;
                }
            }
        </style>
    </head>
    <body>

        
        <!-- Canvas para el fondo dinámico -->
        <canvas id="background" class="background-canvas"></canvas>

        <!-- Juego de Pong -->
        <div id="game-result"></div>
        <div id="pong-score">Player: 0 | AI: 0</div>
        <canvas id="pong-game" width="400" height="200"></canvas>

        <!-- Contenido principal -->
        <Header t={t} currentLanguage={currentLanguage}/>
        <main>
            <slot t={t} currentLanguage={currentLanguage} />
        </main>

        <script>
        const backgroundCanvas = document.getElementById('background');
        const backgroundCtx = backgroundCanvas.getContext('2d');
        const pongCanvas = document.getElementById('pong-game');
        const pongCtx = pongCanvas.getContext('2d');
        const pongScoreDisplay = document.getElementById('pong-score');
        const gameResultDisplay = document.getElementById('game-result');

        let width = window.innerWidth;
        let height = window.innerHeight;
        backgroundCanvas.width = width;
        backgroundCanvas.height = height;

        // Click tracking for activation
        let clickCount = 0;
        let lastClickTime = 0;

        // Paletas de colores
        const whiteColor = ['rgba(255, 255, 255, 0.8)']; // Blanco
        const colorPalette = ['#ff00ff', '#00ffff', '#ff7700', '#ff9900']; // Colores

        // Color actual (inicia en blanco)
        let currentColors = [];

        // Estado de activación
        let gradientActive = false;
        let gameActive = false;

        // Pong Game Variables
        const paddleWidth = 10;
        const paddleHeight = 50;
        const ballSize = 10;
        const MAX_SCORE = 20;
        let leftPaddleY = 75;
        let rightPaddleY = 75;
        let ballX = 200;
        let ballY = 100;
        let ballSpeedX = 2; // Slower speed
        let ballSpeedY = 2; // Slower speed

        // Scoring
        let playerScore = 0;
        let aiScore = 0;

        // Actualizar dimensiones del canvas al redimensionar la ventana
        window.addEventListener('resize', () => {
            width = window.innerWidth;
            height = window.innerHeight;
            backgroundCanvas.width = width;
            backgroundCanvas.height = height;
        });

         // Función para manejar clicks - MODIFIED CLICK ORDER
         function handleClicks(event) {
            const currentTime = Date.now();
            if (currentTime - lastClickTime > 500) {
                clickCount = 0;
            }
            clickCount++;
            lastClickTime = currentTime;

            switch(clickCount) {
                case 2: // White gradient
                    currentColors = whiteColor;
                    gradientActive = true;
                    gameActive = false;
                    pongCanvas.classList.remove('active');
                    body.style.backgroundColor = 'white';
                    break;
                case 3: // Color gradient
                    currentColors = colorPalette;
                    gradientActive = true;
                    gameActive = false;
                    pongCanvas.classList.remove('active');
                    body.style.backgroundColor = 'black';
                    break;
                case 4: // Pong game
                    currentColors = colorPalette;
                    gradientActive = true;
                    gameActive = true;
                    pongCanvas.classList.add('active');
                    resetPongGame();
                    body.style.backgroundColor = 'black';
                    clickCount = 0; //reset after activating pong
                    break;
                case 1: // Deactivate everything
                    currentColors = [];
                    gradientActive = false;
                    gameActive = false;
                    pongCanvas.classList.remove('active');
                    body.style.backgroundColor = 'black';
                    break;

            }
            drawGradient();
        }

        // Registrar clicks
        window.addEventListener('click', handleClicks);

        // Registrar posición del mouse para dibujar gradiente
        window.addEventListener('mousemove', (event) => {
            // Ajusta la posición del gradiente hacia la cola del puntero
            const gradientX = event.clientX - -13; // Desplaza 15px a la izquierda
            const gradientY = event.clientY - -6; // Desplaza 15px hacia arriba

            // Dibujar gradiente solo si está activo
            if (gradientActive) {
                drawGradient(gradientX, gradientY);
            }
        });

        // Dibujar gradiente radial
        function drawGradient(x, y) {
            // Verificar si hay colores para el gradiente
            if (currentColors.length === 0) return;

            const gradient = backgroundCtx.createRadialGradient(x, y, 0, x, y, 26); // Radio más pequeño
            gradient.addColorStop(
                0,
                currentColors[Math.floor(Math.random() * currentColors.length)]
            );
            gradient.addColorStop(1, 'rgba(0, 0, 0, 0)'); // Se desvanece a negro

            backgroundCtx.fillStyle = gradient;
            backgroundCtx.beginPath();
            backgroundCtx.arc(x, y, 100, 0, Math.PI * 2, false);
            backgroundCtx.fill();
        }

        // Ligeramente oscurecer el fondo con cada cuadro
        function fadeBackground() {
            backgroundCtx.fillStyle = 'rgba(0, 0, 0, 0.002)'; // Oscurece lentamente
            backgroundCtx.fillRect(0, 0, width, height);
            requestAnimationFrame(fadeBackground);
        }

        // Pong Game Functions
        let pongAnimationFrame;

        function drawPong() {
            // Check if game is active
            if (!gameActive) return;

            // Clear canvas
            pongCtx.fillStyle = 'black';
            pongCtx.fillRect(0, 0, 400, 200);

            // Draw paddles
            pongCtx.fillStyle = 'white';
            pongCtx.fillRect(0, leftPaddleY, paddleWidth, paddleHeight);
            pongCtx.fillRect(390, rightPaddleY, paddleWidth, paddleHeight);

            // Draw ball
            pongCtx.fillRect(ballX, ballY, ballSize, ballSize);

            // Ball movement
            ballX += ballSpeedX;
            ballY += ballSpeedY;

            // Ball collision with top and bottom
            if (ballY <= 0 || ballY >= 190) {
                ballSpeedY = -ballSpeedY;
            }

            // Ball collision with paddles
            if (
                (ballX <= paddleWidth && ballY >= leftPaddleY && ballY <= leftPaddleY + paddleHeight) ||
                (ballX >= 390 - ballSize && ballY >= rightPaddleY && ballY <= rightPaddleY + paddleHeight)
            ) {
                ballSpeedX = -ballSpeedX;
            }

            // Scoring
            if (ballX <= 0) {
                // AI scores
                aiScore++;
                updateScoreDisplay();
                checkGameEnd();
                resetBall();
            } else if (ballX >= 390) {
                // Player scores
                playerScore++;
                updateScoreDisplay();
                checkGameEnd();
                resetBall();
            }

            // Simple AI paddle movement (improved)
            const aiPaddleCenter = rightPaddleY + paddleHeight / 2;
            if (ballY > aiPaddleCenter + 10) {
                rightPaddleY += 1;
            } else if (ballY < aiPaddleCenter - 10) {
                rightPaddleY -= 1;
            }

            // Keep paddles in bounds
            leftPaddleY = Math.max(0, Math.min(leftPaddleY, 150));
            rightPaddleY = Math.max(0, Math.min(rightPaddleY, 150));

            // Continue animation
            pongAnimationFrame = requestAnimationFrame(drawPong);
        }

        function resetBall() {
            ballX = 200;
            ballY = 100;
            // Randomize ball direction with slower speed
            ballSpeedX = Math.random() > 0.5 ? 2 : -2;
            ballSpeedY = Math.random() > 0.5 ? 2 : -2;
        }

        function updateScoreDisplay() {
            pongScoreDisplay.textContent = `Player: ${playerScore} | AI: ${aiScore}`;
        }

        function checkGameEnd() {
            if (playerScore >= MAX_SCORE) {
                gameResultDisplay.textContent = 'You Win!';
                gameResultDisplay.style.display = 'block';
                gameActive = false;
            } else if (aiScore >= MAX_SCORE) {
                gameResultDisplay.textContent = 'Game Over!';
                gameResultDisplay.style.display = 'block';
                gameActive = false;
            }
        }

        function resetPongGame() {
            // Reset game state
            leftPaddleY = 75;
            rightPaddleY = 75;
            playerScore = 0;
            aiScore = 0;
            updateScoreDisplay();
            resetBall();
            
            // Hide previous game result
            gameResultDisplay.style.display = 'none';
            
            // Stop previous animation if running
            if (pongAnimationFrame) {
                cancelAnimationFrame(pongAnimationFrame);
            }
            
            // Start animation
            pongAnimationFrame = requestAnimationFrame(drawPong);
        }

        // Listen for mouse movement to control left paddle
        pongCanvas.addEventListener('mousemove', (event) => {
            if (!gameActive) return;
            const rect = pongCanvas.getBoundingClientRect();
            const mouseY = event.clientY - rect.top;
            leftPaddleY = Math.max(0, Math.min(mouseY - paddleHeight / 2, 150));
        });

            fadeBackground();
        </script>
    </body>
</html>